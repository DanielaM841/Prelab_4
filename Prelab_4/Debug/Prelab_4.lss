
Prelab_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006f7  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000644  00000000  00000000  00000943  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000029a  00000000  00000000  00000f87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001224  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000365  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  000015ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001629  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  88:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
    }
}
//NON_Interrupt subroutines 
void setup()
{
	cli();
  90:	f8 94       	cli
	DDRD = 0xFF; //COnfigurar el PORTD como salidas 
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00; //inicialmente apagado 
  96:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0x00; // configurar el pin c como entrada
  98:	17 b8       	out	0x07, r1	; 7
	PORTC |= (1<<PORTC0) | (1<<PORTC1); //Activar los pull-ups en el bit 0 y 1 
  9a:	88 b1       	in	r24, 0x08	; 8
  9c:	83 60       	ori	r24, 0x03	; 3
  9e:	88 b9       	out	0x08, r24	; 8
	DDRB |=  (1 << PORTB2) | (1 << PORTB3) | (1 << PORTB4); //pines para los transistores 
  a0:	84 b1       	in	r24, 0x04	; 4
  a2:	8c 61       	ori	r24, 0x1C	; 28
  a4:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00; //inicialmente apagado
  a6:	15 b8       	out	0x05, r1	; 5
	//habilitar interrupciones de pinchange 
	PCICR |= (1 << PCIE1);		//habilita interrupciones en el PORTC
  a8:	e8 e6       	ldi	r30, 0x68	; 104
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9);	//interrupciones para PC0 y PC1
  b2:	ec e6       	ldi	r30, 0x6C	; 108
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	83 60       	ori	r24, 0x03	; 3
  ba:	80 83       	st	Z, r24
	sei(); 
  bc:	78 94       	sei
  be:	08 95       	ret

000000c0 <botones>:
}
void botones()
{
	switch (bandera){
  c0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <bandera>
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	19 f0       	breq	.+6      	; 0xce <botones+0xe>
  c8:	82 30       	cpi	r24, 0x02	; 2
  ca:	51 f0       	breq	.+20     	; 0xe0 <botones+0x20>
  cc:	08 95       	ret
		case 1:
		contador++; //Incrementar contador
  ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d2:	8f 5f       	subi	r24, 0xFF	; 255
  d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		PORTD=contador;		//mostrar en el puerto
  d8:	8b b9       	out	0x0b, r24	; 11
		bandera=0;				//Resetear variable
  da:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <bandera>
		break;
  de:	08 95       	ret
		
		case 2:
		contador--;			//Decrementar contador
  e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e4:	81 50       	subi	r24, 0x01	; 1
  e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		PORTD=contador;
  ea:	8b b9       	out	0x0b, r24	; 11
		bandera=0;				//Resetear pb
  ec:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <bandera>
  f0:	08 95       	ret

000000f2 <main>:


int main(void)
{
    /* Replace with your application code */
	setup();
  f2:	0e 94 48 00 	call	0x90	; 0x90 <setup>
    while (1) 
    {
		botones();
  f6:	0e 94 60 00 	call	0xc0	; 0xc0 <botones>
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <main+0x4>

000000fc <__vector_4>:
		break;
	}
}
//ISR
ISR(PCINT1_vect)
{
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	8f 93       	push	r24
	// Verificamos si PC0 está presionado (nivel bajo)
	if (!(PINC & (1 << PINC0)))
 108:	30 99       	sbic	0x06, 0	; 6
 10a:	04 c0       	rjmp	.+8      	; 0x114 <__vector_4+0x18>
	{
		bandera = 1; // Botón para incrementar
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bandera>
 112:	05 c0       	rjmp	.+10     	; 0x11e <__vector_4+0x22>
	}
	else if (!(PINC & (1 << PINC1)))
 114:	31 99       	sbic	0x06, 1	; 6
 116:	03 c0       	rjmp	.+6      	; 0x11e <__vector_4+0x22>
	{
		bandera = 2; // Botón para decrementar
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bandera>
	}
}
 11e:	8f 91       	pop	r24
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
